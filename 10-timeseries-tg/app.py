import json

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import streamlit as st
from scipy.stats.mstats import winsorize

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Telegram Chat Dashboard", layout="wide")

st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Telegram-—á–∞—Ç–∞")

# --- Sidebar: –≤–≤–æ–¥ –ø—É—Ç–∏ –∫ JSON-—Ñ–∞–π–ª—É ---
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
json_path = st.sidebar.text_input(
    "–ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É",
    value="result.json",
)


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data(path: str) -> pd.DataFrame:
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {e}")
        return pd.DataFrame()

    messages = [msg for msg in data.get("messages", []) if msg.get("type") == "message"]
    df = pd.DataFrame(messages)
    if df.empty:
        return df

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
    df["date"] = pd.to_datetime(df["date"])
    df["from"] = df["from"].astype(str)
    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ —Å—Ç—Ä–æ–∫–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–º–µ—à–µ–Ω–∏—è —Ç–∏–ø–æ–≤
    df["text"] = df["text"].apply(lambda x: x if isinstance(x, str) else "")
    # –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∞–∫—Ü–∏–π
    df["reactions_count"] = df.get("reactions", pd.Series()).apply(
        lambda r: sum(item.get("count", 1) for item in r) if isinstance(r, list) else 0
    )

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∏–Ω–¥–µ–∫—Å
    df.set_index("date", inplace=True)
    return df


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df = load_data(json_path)
if df.empty:
    st.stop()

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
df["day"] = df.index.date
df["hour"] = df.index.hour
df["weekday"] = df.index.day_name()
df["month"] = df.index.to_period("M").astype(str)

# --- –ê–≥—Ä–µ–≥–∞—Ü–∏–∏ ---
msgs_per_min = df.resample("1min").size()
msgs_per_hour = df.resample("H").size()
msgs_per_day = df.groupby("day").size()
weekday_counts = (
    df.groupby("weekday")
    .size()
    .reindex(
        ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    )
)
month_counts = df.groupby("month").size()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ---
st.header("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(label="–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π", value=len(df))
with col2:
    st.metric(label="–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=df["from"].nunique())
with col3:
    top_day = msgs_per_day.idxmax()
    top_day_count = msgs_per_day.max()
    st.metric(label="–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å", value=f"{top_day} ({top_day_count})")
with col4:
    top_user = df["from"].value_counts().idxmax()
    top_user_count = df["from"].value_counts().max()
    st.metric(
        label="–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{top_user} ({top_user_count})"
    )

# --- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã ---
st.header("–í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
fig, axes = plt.subplots(1, 2, figsize=(12, 4))

msgs_per_hour.plot(ax=axes[0])
axes[0].set_title("–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å–∞–º")
axes[0].set_xlabel("–í—Ä–µ–º—è")
axes[0].set_ylabel("–ß–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π")

msgs_per_day.plot(ax=axes[1])
axes[1].set_title("–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–Ω—è–º")
axes[1].set_xlabel("–î–∞—Ç–∞")
axes[1].set_ylabel("–ß–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π")

st.pyplot(fig)

# --- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞–º ---
st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞–º")
fig, axes = plt.subplots(1, 2, figsize=(12, 4))

weekday_counts.plot(kind="bar", ax=axes[0])
axes[0].set_title("–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
axes[0].set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π")

month_counts.plot(kind="bar", ax=axes[1])
axes[1].set_title("–ü–æ –º–µ—Å—è—Ü–∞–º")
axes[1].set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π")

st.pyplot(fig)

# --- –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
st.header("–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
top_users = df["from"].value_counts().head(10).reset_index()
top_users.columns = ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–°–æ–æ–±—â–µ–Ω–∏–π"]
st.table(top_users)

# --- –¢–æ–ø-10 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º ---
st.header("–¢–æ–ø-10 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∏—Å–ª—É —Ä–µ–∞–∫—Ü–∏–π")
top_reacted = df.nlargest(10, "reactions_count")[
    ["from", "text", "reactions_count"]
].rename(
    columns={"from": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "text": "–¢–µ–∫—Å—Ç", "reactions_count": "–†–µ–∞–∫—Ü–∏–π"}
)
st.table(top_reacted)

# --- –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: –¥–µ–Ω—å –≤ –≥–æ–¥—É ---
st.header("–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—é –≥–æ–¥–∞")

day_stats = msgs_per_day.reset_index(name="count")
day_stats["m_d"] = pd.to_datetime(day_stats["day"]).dt.strftime("%m-%d")
seasonal = day_stats.groupby("m_d")["count"].mean().reset_index()
seasonal["count_w"] = winsorize(seasonal["count"], limits=[0.1, 0.1])

fig, axes = plt.subplots(1, 2, figsize=(15, 4))

axes[0].plot(seasonal["m_d"], seasonal["count"])
axes[0].set_title("–°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–Ω—é –≥–æ–¥–∞")
axes[0].tick_params(axis="x", rotation=90)

axes[1].plot(seasonal["m_d"], seasonal["count_w"])
axes[1].set_title("–í–∏–Ω–∑–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥")
axes[1].tick_params(axis="x", rotation=90)

st.pyplot(fig)

st.markdown("---")
st.caption("¬© 2025 Mimika AI Analytics")
